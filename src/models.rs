use chrono::{DateTime, Utc};
use juniper::graphql_object;
use sqlx::FromRow;
use uuid::Uuid;

/// Represents a user in the "users" table.
#[derive(Debug, Clone, FromRow)]
pub struct User {
    /// The unique ID of the user.
    pub id: Uuid,
    /// Auto-generated timestamp specifying when this user was created.
    pub created_at: DateTime<Utc>,
    /// Auto-generated timestamp specifying when this user was last updated.
    pub updated_at: DateTime<Utc>,
    /// The user's username.
    pub username: String,
    /// The user's email address.
    pub email: String,
    /// Timestamp specifying when the user's email address was last verified. This will be none if
    /// the email address hasn't been verified yet.
    pub email_verified_at: Option<DateTime<Utc>>,
    /// A hash of the user's password, generated by the "bcrypt" algorithm. We can use this to
    /// verify a password is correct without actually storing the plain-text password in the
    /// database.
    pub password_hash: String,
}

/// Defines user fields exposed over GraphQL.
#[graphql_object(description = "Information about a user.")]
impl User {
    #[graphql(description = "The unique ID of the user.")]
    pub fn id(&self) -> &Uuid {
        &self.id
    }

    #[graphql(description = "Date when the user was created.")]
    pub fn created_at(&self) -> &DateTime<Utc> {
        &self.created_at
    }

    #[graphql(description = "Date when the user was last updated.")]
    pub fn updated_at(&self) -> &DateTime<Utc> {
        &self.updated_at
    }

    #[graphql(description = "The user's username.")]
    pub fn username(&self) -> &str {
        &self.username
    }

    #[graphql(description = "The user's email address.")]
    pub fn email(&self) -> &str {
        &self.email
    }

    #[graphql(
        description = "Date when the user's email address was last verified. This will be null
        if the email has not been verified yet."
    )]
    pub fn email_verified_at(&self) -> &Option<DateTime<Utc>> {
        &self.email_verified_at
    }
}
